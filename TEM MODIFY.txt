_____________customerSegmentation.py_________________
import streamlit as st
import joblib
import numpy as np
import os

# Load the KMeans model using the correct path
model_path = os.path.join(os.path.dirname(__file__), 'km_model.joblib')
model = joblib.load(model_path)

# Take inputs from the user using Streamlit
annual_income = st.number_input('Enter Annual Income (in $k):')
spending_score = st.number_input('Enter Spending Score (1-100):')

# Create an input array with the new data point
input_array = np.array([[annual_income, spending_score]])

# Button to trigger the prediction
if st.button('Check'):
    predicted_cluster = model.predict(input_array)

    # Assign meaningful labels to each cluster
    if predicted_cluster[0] == 1:
        cluster_label = "Highest"
    elif predicted_cluster[0] == 2:
        cluster_label = "Median Upper"
    elif predicted_cluster[0] == 0:
        cluster_label = "Median"
    elif predicted_cluster[0] == 4:
        cluster_label = "Median Lower"
    elif predicted_cluster[0] == 3:
        cluster_label = "Lowest"

    st.write(f"The new customer belongs to: {cluster_label}")

________________ipynb____________________
# plotting all the clusters and their Centroids

plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='red', label='Cluster 2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='yellow', label='Cluster 3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='violet', label='Cluster 4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='blue', label='Cluster 5')

# plot the centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='cyan', label='Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()



___________GPT SOLUTION________________
# Importing necessary libraries
import matplotlib.pyplot as plt

# Setting up figure size
plt.figure(figsize=(8, 8))

# Plotting each cluster with different colors, sizes, and labels
plt.scatter(X[Y == 0, 0], X[Y == 0, 1], s=60, c='orange', marker='o', label='Group A')
plt.scatter(X[Y == 1, 0], X[Y == 1, 1], s=60, c='purple', marker='^', label='Group B')
plt.scatter(X[Y == 2, 0], X[Y == 2, 1], s=60, c='lime', marker='s', label='Group C')
plt.scatter(X[Y == 3, 0], X[Y == 3, 1], s=60, c='pink', marker='d', label='Group D')
plt.scatter(X[Y == 4, 0], X[Y == 4, 1], s=60, c='skyblue', marker='v', label='Group E')

# Plotting the centroids with distinct colors and size
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=120, c='black', marker='x', label='Cluster Centers')

# Customizing the plot title and axis labels
plt.title('Segmentation of Customers by Income and Spending', fontsize=16)
plt.xlabel('Income per Year', fontsize=14)
plt.ylabel('Score of Spending', fontsize=14)

# Adding a legend
plt.legend()

# Displaying the plot
plt.grid(True)
plt.show()
